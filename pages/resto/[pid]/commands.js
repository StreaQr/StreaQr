//Next imports
import Head from 'next/head'
import Image from 'next/image'
import PropTypes from 'prop-types';
import { useRouter } from "next/router";
import cookie from "cookie";
import Script from 'next/script'
import dynamic from "next/dynamic";
import { useState, useEffect } from 'react';

//Styles
import styles from '../../../styles/Commands.module.css'

//modals
const PopUpWindow = dynamic(import("../../../components/utils/PopUpWindow.js"))

// import Swiper core and required modules
import { Swiper, SwiperSlide } from "swiper/react";
import SwiperCore, {
    Navigation, Pagination, EffectCoverflow, A11y
} from 'swiper';

// install Swiper modules
SwiperCore.use([EffectCoverflow, Pagination]);

// Import Swiper styles
import "swiper/css";
import "swiper/css/effect-cards"
import 'swiper/css/navigation';
import 'swiper/css/pagination';
import 'swiper/css/scrollbar';

const Commands = ({ RestaurantName, Data }) => {

    const router = useRouter()
    const [popUp, setPopUp] = useState(false)
    const [states, setStates] = useState({
        "Code": true,
        "Error": false
    })


    useEffect(() => {
        let TempCookie = cookie.parse(document.cookie)

        if (TempCookie.Code)
            setStates({ ...states, Code: TempCookie.Code })
        else
            setStates({ ...states, Code: "" })
        let id = router.asPath.match(/#([a-z0-9]+)/gi)
        if ((id != null) && (id[0] == "#OnlineMenu")) {
            setPopUp("OrderCallOnline")
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [])

    const handleCancel = (err) => {
        if (err == undefined)
            setPopUp(false)
        else
            if (err == "Success")
                setPopUp("Success")
            else if (err == 'SuccessFeedback')
                setPopUp("SuccessFeedback")
            else if (err) {
                setStates({ ...states, Error: err })
                setPopUp(false)
            }
    }
    if (states.Error != false) {
        setTimeout(() => {
            setStates({ ...states, Error: false })
        }, 5000);
    }


    return (
        <>
            <Head>
                <title>{RestaurantName} Commands</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/StreaQrLogo.ico" />
            </Head>
            <Script src="https://cdn.onesignal.com/sdks/OneSignalSDK.js" async="" />
            {(states.Code == "1") ?
                <div style={{ marginBottom: 0 }} className="alert alert-info">
                    <strong>Info:</strong> The QrCode you scanned have the commands section disabled
                </div>
                :
                <div />}
            {(Data == `"NoSubscription"`) ?
                <div style={{ marginBottom: 0 }} className="alert alert-info">
                    <strong>Note:</strong> This Restaurant does not have the commands section enabled
                </div>
                :
                <div />
            }
            {((states.Code == "") && (Data != `"NoSubscription"`) && (states.Code != "1")) ?
                <div className="alert alert-danger">
                    <strong>Error:</strong> We couldn{"'"}t detect a code please make sure you have scanned the qrCode before accessing this page. Otherwise make sure you have cookies enabled
                </div>
                :
                <div />
            }
            {((states.Code == "201") || (Error == "201")) ?
                <div className="alert alert-danger">
                    <strong>Error:</strong> Invalid Code this means the qrCode you have scanned is expired please ask the waiter for a new code
                </div>
                :
                <div />
            }
            {((states.Error != "201") && (states.Error != false)) ?
                <div className="alert alert-danger">
                    <strong>Error:</strong> {states.Error}
                </div>
                :
                <div />
            }
            {((states.Code != "201") && (states.Code != true) && (states.Code != "1") && (Data != `"NoSubscription"`) && (states.Code != "")) ?
                <PopUpWindow popUp={popUp} Data={JSON.parse(Data)} RestaurantName={RestaurantName} handleCancel={handleCancel} />
                :
                <div />
            }
            <div className={styles.container}>
                <main className={styles.main} >
                    <Swiper
                        modules={[Navigation, Pagination, A11y]}
                        navigation
                        style={{ overflow: "visible" }}
                        scrollbar={{ draggable: true }}
                        //onSwiper={ }
                        //onSlideChange={ }
                        effect={'coverflow'} grabCursor={true} centeredSlides={true} slidesPerView={'auto'} coverflowEffect={{
                            "rotate": 50,
                            "stretch": 0,
                            "depth": 100,
                            "modifier": 1,
                            "slideShadows": true
                        }} pagination={{
                            clickable: true,
                        }} className="mySwiper">
                        <SwiperSlide>
                            <p className="headerWrapper">Order</p>
                            <div onClick={() => setPopUp("OrderCall")} className={styles.imageContainer}>
                                <div className={styles.box}>
                                    <div className={styles.boxinner}>
                                        <div style={{ paddingLeft: 30, paddingRight: 30, paddingTop: 15, paddingBottom: 10, left: "5%", position: "relative" }}>
                                            <Image

                                                src={"/waiter.png"}
                                                alt="Picture of the author"
                                                width={500}
                                                priority={true}
                                                height={500}
                                            />
                                        </div>
                                        <p className={styles.CardText} >Im Ready to order</p>
                                    </div>
                                </div>
                            </div>
                        </SwiperSlide>
                        <SwiperSlide >
                            <p className="headerWrapper">Waiter</p>
                            <div onClick={() => setPopUp("CallWaiter")} className={styles.imageContainer}>
                                <div className={styles.box}>
                                    <div className={styles.boxinner}>
                                        <div style={{ paddingLeft: 30, paddingRight: 30, paddingTop: 15, paddingBottom: 10 }}>
                                            <Image
                                                src={"/waiter2.png"}
                                                alt="Picture of the author"
                                                width={500}
                                                height={500}
                                            />
                                        </div>
                                        <p className={styles.CardText} >Call waiter</p>
                                    </div>
                                </div>
                            </div>
                        </SwiperSlide>
                        <SwiperSlide>
                            <p className="headerWrapper">Receipt</p>
                            <div onClick={() => setPopUp("Receipt")} className={styles.imageContainer}>
                                <div className={styles.box}>
                                    <div className={styles.boxinner}>
                                        <div style={{ paddingLeft: 30, paddingRight: 30, paddingTop: 15, paddingBottom: 10 }}>
                                            <Image
                                                src={"/receipt.png"}
                                                alt="Picture of the author"
                                                width={500}
                                                height={500}
                                            />
                                        </div>
                                        <p className={styles.CardText} >Order receipt</p>
                                    </div>
                                </div>
                            </div>
                        </SwiperSlide>
                        <SwiperSlide>
                            <p className="headerWrapper">Rating</p>
                            <div onClick={() => setPopUp("Rating")} className={styles.imageContainer}>
                                <div className={styles.box}>
                                    <div className={styles.boxinner}>
                                        <div style={{ paddingLeft: 30, paddingRight: 30, paddingTop: 15, paddingBottom: 10 }}>
                                            <Image
                                                src={"/rating.png"}
                                                alt="Picture of the author"
                                                width={500}
                                                height={500}
                                            />
                                        </div>
                                        <p className={styles.CardText} >Rate Service</p>
                                    </div>
                                </div>
                            </div>
                        </SwiperSlide>
                    </Swiper>
                    {(popUp == "Receipt") ?
                        <div onClick={() => setPopUp("DownloadReceipt")} className={styles.NotificationContainer}>
                            <Image
                                src={"/downloadReceipt.png"}
                                alt="Download Receipt"
                                layout="responsive"
                                width={30}
                                height={30}
                            />
                        </div>
                        :
                        null
                    }
                </main>
            </div >
            {((popUp == "Success") || (popUp == "SuccessFeedback")) ?
                <>
                    <div style={{ backgroundColor: "rgba(0, 0, 0, 0.8)", width: "100%", zIndex: 10001, position: "fixed", height: "100%", top: 0, }}></div>
                    <svg className={styles.checkmark} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52">
                        <circle className={styles.checkmark__circle} cx="26" cy="26" r="25" fill="none" />
                        <path className={styles.checkmark__check} fill="none" d="M14.1 27.2l7.1 7.2 16.7-16.8" />
                    </svg>
                    <p className={styles.confirmationText}>{(popUp == "Success") ? "Request received by the waiter" : "Thanks for your feedback"}</p>
                    <button onClick={() => setPopUp(false)} className={styles.confirmationButton}>ok</button>
                </>
                :
                null
            }
        </>
    );
}

Commands.propTypes = {
    RestaurantName: PropTypes.string,
    Data: PropTypes.string
}



import getRestoCommands from "../../../components/utils/getRestoMenu/commands"
// This function gets called at build time on server-side.
// It may be called again, on a serverless function, if
// revalidation is enabled and a new request comes in
export async function getStaticProps(context) {
    const { params } = context

    const Data = await getRestoCommands(params.pid)
    const StringifiedData = JSON.stringify(Data)


    if (Data)
        return {
            props: {
                Data: StringifiedData,
                RestoName: params.pid,
                RestaurantName: params.pid,
            },
            revalidate: 21600, // Next page regeneration (seconds)
        }
    else
        return {
            notFound: true
        }

}


// This function gets called at build time on server-side.
// It may be called again, on a serverless function, if
// the path has not been generated.
export async function getStaticPaths() {
    // We'll pre-render only these paths at build time.
    return {
        paths: [{ params: { pid: 'd' } }], fallback: 'blocking'
    }
}

export default Commands;
